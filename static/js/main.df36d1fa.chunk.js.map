{"version":3,"sources":["Header.js","GenMem.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","GenMem","handleChange","e","target","name","value","setState","handleSubmit","preventDefault","memes","state","randomIndex","Math","floor","random","length","randomImage","url","topText","bottomText","fetch","then","it","json","data","console","log","this","Fragment","className","onSubmit","type","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yKAYeA,G,MAVA,kBACb,gCACE,yBACEC,IAAI,iEACJC,IAAI,cAEN,gD,mCC0DWC,E,kDA/Db,aAAe,IAAD,8BACZ,gBAmBFC,aAAe,SAACC,GAAO,IAAD,EACIA,EAAEC,OAAlBC,EADY,EACZA,KAAMC,EADM,EACNA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,KAtBZ,EAyBdE,aAAe,SAACL,GACdA,EAAEM,iBADkB,IAEZC,EAAU,EAAKC,MAAfD,MACFE,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMM,QACrD,EAAKT,SAAS,CAAEU,YAAaP,EAAME,GAAaM,OA3BhD,EAAKP,MAAQ,CACXQ,QAAS,GACTC,WAAY,GACZH,YAAa,gCACbP,MAAO,IANG,E,gEAUO,IAAD,OAClBW,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAQA,EAAGC,UAChBF,MAAK,SAACC,GAAQ,IACLb,EAAUa,EAAGE,KAAbf,MACRgB,QAAQC,IAAIjB,EAAM,IAClB,EAAKH,SAAS,CAAEG,e,+BAgBZ,IAAD,EACsCkB,KAAKjB,MAA1CQ,EADD,EACCA,QAASC,EADV,EACUA,WAAYH,EADtB,EACsBA,YAC7B,OACE,kBAAC,IAAMY,SAAP,KACE,0BAAMC,UAAU,YAAYC,SAAUH,KAAKpB,cACzC,2BACEwB,KAAK,OACL3B,KAAK,UACL4B,YAAY,WACZ3B,MAAOa,EACPe,SAAUN,KAAK1B,eAEjB,2BACE8B,KAAK,OACL3B,KAAK,aACL4B,YAAY,cACZ3B,MAAOc,EACPc,SAAUN,KAAK1B,eAEjB,wCAEF,yBAAK4B,UAAU,gBACb,yBAAK/B,IAAKkB,EAAaa,UAAU,aAAa9B,IAAI,WAClD,wBAAI8B,UAAU,YAAYX,GAC1B,wBAAIW,UAAU,eAAeV,S,GAzDlBe,aCWNC,MATf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.df36d1fa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => (\r\n  <header>\r\n    <img\r\n      src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n      alt=\"TrollFace\"\r\n    />\r\n    <p>Meme Generator</p>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass GenMem extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      randomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n      memes: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then((it) => it.json())\r\n      .then((it) => {\r\n        const { memes } = it.data;\r\n        console.log(memes[0]);\r\n        this.setState({ memes });\r\n      });\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { memes } = this.state;\r\n    const randomIndex = Math.floor(Math.random() * memes.length);\r\n    this.setState({ randomImage: memes[randomIndex].url });\r\n  };\r\n\r\n  render() {\r\n    const { topText, bottomText, randomImage } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"topText\"\r\n            placeholder=\"Top text\"\r\n            value={topText}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"bottomText\"\r\n            placeholder=\"Bottom text\"\r\n            value={bottomText}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button>Gen</button>\r\n        </form>\r\n        <div className=\"meme-wrapper\">\r\n          <img src={randomImage} className=\"random-img\" alt=\"random\" />\r\n          <h2 className=\"top-text\">{topText}</h2>\r\n          <h2 className=\"bottom-text\">{bottomText}</h2>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GenMem;\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport GenMem from \"./GenMem\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <GenMem />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}